#================================================================================#
# This makefile created by G. Vijayakumar on 28-July-2016                        #
# adapted from FAST (B. Jonkman on 28-July-2016.                                 #
# (c) 2016 National Renewable Energy Laboratory                                  #
#                                                                                #
# This makefile has been tested on Linux x64 with gfortran-4.8.                  #
#                                                                                #
# It was designed to be used with FAST_ProgC.c for a C driver program for FAST    #
#================================================================================#

#COMPILER options - gnu, intel, intelPhi
#COMPILER = intelPhi

#BUILD options - release, debug
#BUILD = release

#LAPACK options - lapack, mkl
#LAPACK = LAPACK

   # Name of compiler to use and flags to use.
ifeq ($(COMPILER),gnu)
     CC = mpicc
     CPP = mpic++
else ifeq ($(COMPILER),intel)
     CC = mpiicc
     CPP = mpiicpc
else ifeq ($(COMPILER),intelPhi)
     CC = mpiicc
     CPP = mpiicpc
endif

ifeq ($(BUILD),release)
	OPT_OPTIONS = -O2
else ifeq ($(BUILD),debug)
	OPT_OPTIONS = -O0 -g
endif

   # 32-bit or 64-bit?
#BITS = 32
BITS = 64

   # Location of source files for the DLL.
   # You may need to change these for your DLL.

SOURCE_DIR  = ../Source
SOURCE_FILES = FAST_cInterface.c FAST_ProgC.c 

ifeq ($(COMPILER),gnu)
	EXE_EXT   = _glin$(BITS)_$(BUILD)
else ifeq ($(COMPILER),intel)
	EXE_EXT   = _ilin$(BITS)_$(BUILD)
else ifeq ($(COMPILER),intelPhi)
	EXE_EXT   = _iphilin$(BITS)_$(BUILD)
endif


   # Name of compiler to use and flags to use.
ifeq ($(COMPILER),gnu)
        CFLAGS = $(OPT_OPTIONS) -fPIC -fpermissive -std=c++11 -DHAVE_MPI
	LDFLAGS = -fPIC -L$(FASTLIB_DIR) -L$(YAMLCPPLIB_DIR) -lFAST_cInterface$(EXE_EXT) -lFAST$(EXE_EXT) -lmap-1.20.10 -lyaml-cpp -ldl -lgfortran -lz -lhdf5_hl -lhdf5 
	ifeq ($(LAPACK),lapack)
		LAPACK_LINK = -L$(FASTLIB_DIR)$(BITS) -llapack -lblas -llapacke -lm
	else ifeq ($(LAPACK),mkl)
		LAPACK_LINK = -Wl,-rpath,/nopt/intel/16.0/compilers_and_libraries_2016.2.181/linux/mkl/lib/intel64 -Wl,-rpath,/nopt/intel/16.0/compilers_and_libraries_2016.2.181/linux/mkl/../compiler/lib/intel64 -L/nopt/intel/16.0/compilers_and_libraries_2016.2.181/linux/mkl/lib/intel64 -L/nopt/intel/16.0/compilers_and_libraries_2016.2.181/linux/mkl/../compiler/lib/intel64 -lmkl_intel_lp64 -lmkl_intel_thread -lmkl_core -liomp5 -lpthread -lm
	endif
else ifeq ($(COMPILER),intel)
	CFLAGS  = $(OPT_OPTIONS) -fpermissive -fp-model strict -xhost -DHAVE_MPI -fPIC -std=c++11 
	LDFLAGS    = -fPIC -L$(FASTLIB_DIR) -L$(YAMLCPPLIB_DIR) -lFAST_cInterface$(EXE_EXT) -lFAST$(EXE_EXT) -lmap-1.20.10 -lyaml-cpp -ldl
	LAPACK_LINK = -Wl,-rpath,/nopt/intel/16.0/compilers_and_libraries_2016.2.181/linux/mkl/lib/intel64 -Wl,-rpath,/nopt/intel/16.0/compilers_and_libraries_2016.2.181/linux/mkl/../compiler/lib/intel64 -L/nopt/intel/16.0/compilers_and_libraries_2016.2.181/linux/mkl/lib/intel64 -L/nopt/intel/16.0/compilers_and_libraries_2016.2.181/linux/mkl/../compiler/lib/intel64 -lmkl_intel_lp64 -lmkl_intel_thread -lmkl_core -liomp5 -lpthread -lm
else ifeq ($(COMPILER),intelPhi)
	CFLAGS  = $(OPT_OPTIONS) -fpermissive -fp-model strict -mmic -DHAVE_MPI -fPIC -fpermissive -std=c++11 
	LDFLAGS    = -fPIC -L$(FASTLIB_DIR) -L$(YAMLCPPLIB_DIR) -lFAST_cInterface$(EXE_EXT) -lFAST$(EXE_EXT) -lmap-1.20.10 -lyaml-cpp -ldl
	LAPACK_LINK  = -Wl,-rpath,/nopt/intel/16.0/compilers_and_libraries_2016.2.181/linux/mkl/lib/mic -Wl,-rpath,/nopt/intel/16.0/compilers_and_libraries_2016.2.181/linux/mkl/../compiler/lib/mic -L/nopt/intel/16.0/compilers_and_libraries_2016.2.181/linux/mkl/lib/mic -L/nopt/intel/16.0/compilers_and_libraries_2016.2.181/linux/mkl/../compiler/lib/mic -lmkl_intel_lp64 -lmkl_intel_thread -lmkl_core -liomp5 -lpthread -lm
endif


   # Destination and RootName for executable

YAMLCPPINCLUDE_DIR = ../include
YAMLCPPLIB_DIR = ../lib
FASTLIB_DIR = ../lib
DEST_DIR    = ../bin

   #==========================================================#
   # You should not need to change anything beyond this point #
   #==========================================================#

#Currently only supports Linux
# System-specific settings.
DEL_CMD   = rm -f
INTER_DIR = Obj_lin$(BITS)
MD_CMD    = @mkdir -p
OBJ_EXT   = .o
PATH_SEP  = /
SYS_FILE  = SysGnuLinux

UNAME := $(shell uname -s)

_ALL_OBJS  = $(SOURCE_FILE:.c=$(OBJ_EXT))
ALL_OBJS   = $(patsubst %,$(INTER_DIR)/%,$(_ALL_OBJS))

# Rule to do everything.

all:     default
default:  $(INTER_DIR) $(DEST_DIR)/FAST_ProgC$(EXE_EXT)

   # General rules for compliling the files.

$(INTER_DIR)/FAST_cInterface.o: $(SOURCE_DIR)/FAST_cInterface.c $(SOURCE_DIR)/FAST_cInterface.h $(SOURCE_DIR)/dependencies/OpenFOAM/OpenFOAM_Types.h $(SOURCE_DIR)/dependencies/SuperController/SuperController_Types.h $(SOURCE_DIR)/SC.h
	$(CPP)  $(CFLAGS) -c $< -I$(SOURCE_DIR)/dependencies/OpenFOAM/ -I$(SOURCE_DIR)/dependencies/SuperController -I$(YAMLCPPINCLUDE_DIR) -o $@ 

$(INTER_DIR)/SC.o: $(SOURCE_DIR)/SC.c $(SOURCE_DIR)/SC.h 
	$(CPP)  $(CFLAGS) -c $< -I$(YAMLCPPINCLUDE_DIR) -o $@ 

$(INTER_DIR)/FAST_ProgC.o: $(SOURCE_DIR)/FAST_ProgC.c $(SOURCE_DIR)/FAST_cInterface.h $(INTER_DIR)/FAST_cInterface.o $(SOURCE_DIR)/dependencies/OpenFOAM/OpenFOAM_Types.h $(SOURCE_DIR)/dependencies/SuperController/SuperController_Types.h
	$(CPP)  $(CFLAGS) -c $< -I$(SOURCE_DIR) -I$(SOURCE_DIR)/dependencies/OpenFOAM/ -I$(SOURCE_DIR)/dependencies/SuperController -I$(YAMLCPPINCLUDE_DIR) -o $@

   # Make sure the destination directory for the intermediate files exist.

$(INTER_DIR):
	$(MD_CMD) $(INTER_DIR)

   # For linking 

$(FASTLIB_DIR)/libFAST_cInterface$(EXE_EXT).a: $(INTER_DIR)/FAST_cInterface.o $(INTER_DIR)/SC.o
	ar rcs $(FASTLIB_DIR)/libFAST_cInterface$(EXE_EXT).a $(INTER_DIR)/FAST_cInterface.o $(INTER_DIR)/SC.o
	cp $(SOURCE_DIR)/FAST_cInterface.h $(SOURCE_DIR)/FAST_Library.h $(SOURCE_DIR)/dependencies/OpenFOAM/OpenFOAM_Types.h $(SOURCE_DIR)/dependencies/SuperController/SuperController_Types.h $(SOURCE_DIR)/SC.h ../include

$(DEST_DIR)/FAST_ProgC$(EXE_EXT): $(FASTLIB_DIR)/libFAST_cInterface$(EXE_EXT).a $(INTER_DIR)/FAST_ProgC.o
	$(CPP) $(CFLAGS) -o $(DEST_DIR)/FAST_ProgC$(EXE_EXT) \
	$(INTER_DIR)/FAST_ProgC.o  $(LDFLAGS) $(LAPACK_LINK)

   # Cleanup afterwards.

clean:
	$(DEL_CMD) $(INTER_DIR)$(PATH_SEP)FAST_ProgC$(OBJ_EXT) $(INTER_DIR)$(PATH_SEP)FAST_cInterface$(OBJ_EXT) $(FASTLIB_DIR)$(PATH_SEP)libFAST_cInterface$(EXE_EXT).a $(INTER_DIR)$(PATH_SEP)FAST_ProgC$(OBJ_EXT)
#	$(DEL_CMD) $(INTER_DIR)$(PATH_SEP)*$(OBJ_EXT) $(DEST_DIR)/$(OUTPUT_NAME)$(EXE_EXT)
